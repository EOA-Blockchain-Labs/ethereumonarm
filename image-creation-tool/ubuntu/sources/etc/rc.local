#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
# This script turns the Ubuntu 64 bit image into an Ethereum on ARM image
#

FLAG="/root/first-run.flag"
if [ ! -f $FLAG ]; then

  # Wait to interface to link up
  n=0
  until [ "$n" -ge 3 ]
  do
    nc -z apt.ethraspbian.com 80  > /dev/null 2>&1
    if [ $? -eq 0 ]; then
      break
    else
      n=$((n+1))
      sleep 5
    fi
  done

  if [ "$n" -eq 3 ]; then
    echo "Stopping the installation, access to apt.ethraspbian.com is needed"
    exit 1
  fi

  # Format USB3 SSD and mount it as /home
  echo "Looking for USB drive"
  if stat  /dev/sda > /dev/null 2>&1;
  then
    echo "USB drive found"
    echo "Partitioning and formatting USB Drive..."
    wipefs -a /dev/sda
    sgdisk -n 0:0:0 /dev/sda
    mkfs.ext4 -F /dev/sda1
    echo '/dev/sda1 /home ext4 defaults 0 2' >> /etc/fstab && mount /home
  else
    echo "no SDD detected"
    echo "Stopping the installation, and extenal disk is needed"
    exit 1
  fi

  # Modify hostname (ethereumonarm-ropsten-$MAC-HASH-CHUNK)
  echo Changing hostname
  MAC_HASH=`cat /sys/class/net/eth0/address | sha256sum | awk '{print substr($0,0,9)}'`
  echo ethereumonarm-$MAC_HASH > /etc/hostname
  sed -i "s/127.0.0.1.*/127.0.0.1\tethereumonarm-$MAC_HASH/g" /etc/hosts

  # Create Ethereum account
  echo "Creating ethereum user"
  if ! id -u ethereum >/dev/null 2>&1; then
    adduser --disabled-password --gecos "" ethereum
  fi

  echo "ethereum:ethereum" | chpasswd
  for GRP in sudo netdev audio video dialout plugdev; do
    adduser ethereum $GRP
  done

  # Force password change on first login
  chage -d 0 ethereum

  # Page allocation error workout
  echo "vm.min_free_kbytes=65536" >> /etc/sysctl.conf
  # Increasing how aggressively the kernel will swap memory pages since we are using ZRAM first
  echo "vm.swappiness=100" >> /etc/sysctl.conf
  # Increases cache pressure, which increases the tendency of the kernel to reclaim memory used for caching of directory and inode objects. You will use less memory over a longer period of time
  echo "vm.vfs_cache_pressure=500" >> /etc/sysctl.conf
  # Background processes will start writing right away when it hits the 1% limit but the system wonâ€™t force synchronous I/O until it gets to 50% dirty_ratio
  echo "vm.dirty_background_ratio=1" >> /etc/sysctl.conf
  echo "vm.dirty_ratio=50" >> /etc/sysctl.conf

  # Ethereum software installation
  # Add APT EthRaspbian repository
  sleep 25
  echo "Adding Ethereum repositories"
  apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 8A584409D327B0A5
  add-apt-repository -n "deb http://apt.ethraspbian.com focal main"

  # Install Ethereum packages
  echo Installing Ethereum packages
  apt-get update
  apt-get -y install ropsten-config ethereumonarm-armbian-extras geth-ropsten nethermind-ropsten besu-ropsten erigon-ropsten prysm-ropsten lighthouse-ropsten nimbus-ropsten teku-ropsten eth2.0-deposit-cli
  systemctl enable ropsten-config

  # Install monitoring packages
  wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
  echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
  apt-get -y update
  apt-get -y install grafana
  systemctl enable grafana-server
  useradd -m prometheus
  mkdir -p /home/prometheus/node-exporter/
  chown -R  prometheus:prometheus /home/prometheus/
  apt-get install -y prometheus prometheus-node-exporter prometheus-pushgateway

  #Install ufw
  apt-get -y install ufw
  ufw --force disable

  apt-get -y install ethereumonarm-monitoring-extras
  set-ethereunonarm-monitoring-extras -o
  # Install some extra dependence
  apt-get -y install libraspberrypi-bin net-tools
  #Disable root user
  passwd -l root

  #Delete ubuntu user
  deluser ubuntu

  #the next line creates an empty file so it won't run the next boot
  touch $FLAG
  reboot
else
  echo "Nothing to do"
fi
exit 0
