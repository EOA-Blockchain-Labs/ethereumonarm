#!/bin/bash
#
# /etc/rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Ensure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script, just change the execution bits.
#
# By default, this script does nothing.
# This script transforms the Ubuntu image into an Ethereum on ARM image
# for various devices.

# --- Device Model Detection and Variable Setup ---
# Device model detection
DEVICE_MODEL=$(cat /sys/firmware/devicetree/base/model 2>/dev/null || uname -m | tr -d '\0')

# Device-specific variables configuration
case "$DEVICE_MODEL" in
"Raspberry Pi 5 Model B Rev 1.1")
    TARGET_DISK="/dev/nvme0n1"
    PARTITION1="p1"
    HOSTNAME_SEED="rpi5"
    DEVICE_RAM=$(free -m | awk '/Mem:/ {print $2}') # Get RAM in MB
    if [ "$DEVICE_RAM" -le 4096 ]; then             # Example: 4GB or less RAM
        SWAP_SIZE=4096                              # 4GB swap for <= 4GB RAM
        SWAPPINESS=20                               # Slightly more aggressive swapping
    else
        SWAP_SIZE=2048 # 2GB swap for > 4GB RAM
        SWAPPINESS=10  # Less aggressive swapping
    fi
    ;;
"FriendlyElec NanoPC-T6")
    TARGET_DISK="/dev/nvme0n1" # Adjust if needed for your specific setup
    PARTITION1="p1"            # Adjust if needed for your specific setup
    HOSTNAME_SEED="nanopct6"
    DEVICE_RAM=$(free -m | awk '/Mem:/ {print $2}') # Get RAM in MB
    if [ "$DEVICE_RAM" -le 8192 ]; then             # Example: 8GB or less RAM
        SWAP_SIZE=8192                              # 8GB swap for <= 8GB RAM
        SWAPPINESS=15
    else
        SWAP_SIZE=4096 # 4GB swap for > 8GB RAM
        SWAPPINESS=10
    fi
    ;;
"Radxa ROCK 5B")
    TARGET_DISK="/dev/nvme0n1" # Adjust if needed for your specific setup
    PARTITION1="p1"            # Adjust if needed for your specific setup
    HOSTNAME_SEED="rock5b"
    DEVICE_RAM=$(free -m | awk '/Mem:/ {print $2}') # Get RAM in MB
    if [ "$DEVICE_RAM" -le 16384 ]; then            # Example: 16GB or less RAM
        SWAP_SIZE=8192                              # 8GB swap for <= 16GB RAM
        SWAPPINESS=10
    else
        SWAP_SIZE=4096 # 4GB swap for > 16GB RAM
        SWAPPINESS=5
    fi
    ;;
"Orange Pi 5 Plus")
    TARGET_DISK="/dev/nvme0n1" # Adjust if needed for your specific setup
    PARTITION1="p1"            # Adjust if needed for your specific setup
    HOSTNAME_SEED="opi5plus"
    DEVICE_RAM=$(free -m | awk '/Mem:/ {print $2}') # Get RAM in MB
    if [ "$DEVICE_RAM" -le 8192 ]; then             # Example: 8GB or less RAM
        SWAP_SIZE=8192                              # 8GB swap for <= 8GB RAM
        SWAPPINESS=15
    else
        SWAP_SIZE=4096 # 4GB swap for > 8GB RAM
        SWAPPINESS=10
    fi
    ;;
*)
    echo "Unrecognized device model: $DEVICE_MODEL. Exiting."
    exit 1
    ;;
esac
# --- End of Device Model Detection and Variable Setup ---

# Function to format a disk as /home/ethereum
format_disk() {
    DISK="$1"
    PARTITION="${DISK}${PARTITION1}"

    # Create a temporary directory for mounting
    local TMP_DIR
    TMP_DIR=$(mktemp -d)
    local PROCEED_WITH_FORMAT=false

    # If the partition exists and is some kind of Linux filesystem, try mounting it
    if [[ -b "$PARTITION" ]] && command -v file >/dev/null 2>&1 && [[ $(file -s "$PARTITION" | grep -oP 'Linux.*filesystem') ]]; then
        mount "$PARTITION" "$TMP_DIR" 2>/dev/null
    fi

    # Check if /home/ethereum exists on the mounted disk
    if [ -d "$TMP_DIR/ethereum" ]; then
        # Check for .format_me file to force formatting
        if [ -f "$TMP_DIR/ethereum/.format_me" ]; then
            PROCEED_WITH_FORMAT=true
        else
            PROCEED_WITH_FORMAT=false
        fi
    else
        PROCEED_WITH_FORMAT=true
    fi

    # Unmount if we mounted it
    if mountpoint -q "$TMP_DIR"; then
        umount "$TMP_DIR"
    fi
    rm -rf "$TMP_DIR"

    # Proceed with format if appropriate
    if [ "$PROCEED_WITH_FORMAT" = true ]; then
        wipefs -a "$DISK"
        sgdisk -n 0:0:0 "$DISK"
        mkfs.ext4 -F "$PARTITION" || {
            return 1
        }
    fi
}

FLAG="/root/first-run.flag"
if [ ! -f "$FLAG" ]; then

    # Step 1: Install necessary dependencies
    apt-get update
    apt-get -y install gdisk software-properties-common apt-utils vim net-tools file # telnet REMOVED as requested

    # Step 2: Detect target disk (using device-specific variable TARGET_DISK)

    # Step 3: Partition and format the detected disk
    format_disk "$TARGET_DISK"
    if [ $? -ne 0 ]; then
        exit 1
    fi

    # Step 4: Remove FS reserved blocks to maximize usable space
    tune2fs -m 0 "${TARGET_DISK}${PARTITION1}"

    # Step 5: Mount the disk as /home
    echo "${TARGET_DISK}${PARTITION1} /home ext4 defaults,noatime 0 2" >>/etc/fstab && mount /home

    # Step 6: Create ethereum user
    if ! id -u ethereum >/dev/null 2>&1; then
        adduser --disabled-password --gecos "" ethereum
        echo "ethereum:ethereum" | chpasswd
    fi
    for GRP in sudo netdev audio video dialout plugdev; do
        adduser ethereum "$GRP"
    done
    # Force password change on first login for security
    chage -d 0 ethereum

    # Step 7: Swap installation and configuration
    apt-get -y install dphys-swapfile
    # Configure dphys-swapfile to use a file on /home/ethereum and set size
    sed -i "s|#CONF_SWAPFILE=.*|CONF_SWAPFILE=/home/ethereum/swapfile|" /etc/dphys-swapfile
    sed -i "s|#CONF_SWAPSIZE=.*|CONF_SWAPSIZE=${SWAP_SIZE}|" /etc/dphys-swapfile
    sed -i "s|#CONF_MAXSWAP=.*|CONF_MAXSWAP=${SWAP_SIZE}|" /etc/dphys-swapfile
    systemctl enable dphys-swapfile

    # Step 8: Modify hostname and /etc/hosts
    # Get the network interface for hostname generation
    ACTIVE_INTERFACE=$(ip route get 8.8.8.8 | awk '/dev/ {print $5}')
    # Get the MAC address for the active network interface for unique hostname
    MAC_ADDRESS=$(cat /sys/class/net/"$ACTIVE_INTERFACE"/address)
    MAC_HASH=$(echo "$MAC_ADDRESS" | sha256sum | awk '{print substr($0,0,9)}')
    echo "ethereumonarm-${HOSTNAME_SEED}-${MAC_HASH}" >/etc/hostname
    sed -i "s/rpi5b/ethereumonarm-${HOSTNAME_SEED}-${MAC_HASH}/g" /etc/hosts

    # Step 9: Disable ZRAM if present
    if [ -f /etc/default/armbian-zram-config ]; then
        sed -i "s/ENABLED=true/ENABLED=false/g" /etc/default/armbian-zram-config
    fi

    # Step 10: Tune swappiness for better performance with Ethereum nodes
    echo "vm.swappiness=${SWAPPINESS}" >>/etc/sysctl.conf
    sysctl -p

    # Step 11: Ethereum software installation
    # Step 11a: Adding Ethereum on ARM repository for package management
    wget -q -O - http://apt.ethereumonarm.com/eoa.apt.keyring.gpg | sudo tee /etc/apt/trusted.gpg.d/eoa.apt.keyring.gpg >/dev/null
    add-apt-repository -y -n "deb http://apt.ethereumonarm.com jammy main"

    # Step 11b: Installing core Ethereum packages (clients and tools)
    apt-get update
    apt-get -y install geth nethermind erigon reth besu prysm lighthouse nimbus teku lodestar staking-deposit-cli
    apt-get -y install arbitrum-nitro optimism-op-geth optimism-op-node polygon-bor polygon-heimdall starknet-juno fuel-network

    # Step 11c: Create an alias for easy Ethereum package updates in .bashrc
    cat <<EOF >>/etc/bash.bashrc
alias update-ethereum='
sudo apt-get update
sudo apt-get install geth nethermind erigon reth besu prysm lighthouse nimbus teku staking-deposit-cli'
EOF

    # Step 12: Install monitoring stack (Prometheus & Grafana) for node observability
    apt-get -y install gpg wget
    wget -q -O - https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/grafana.gpg >/dev/null
    echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
    apt-get -y update
    apt-get -y install grafana
    systemctl enable grafana-server

    # Add Prometheus user for monitoring services
    adduser --quiet --system --home /home/prometheus --no-create-home --group --gecos "Prometheus daemon" prometheus
    mkdir -p /home/prometheus/{metrics2,node-exporter}
    chown -R prometheus:prometheus /home/prometheus/{metrics2,node-exporter}
    apt-get install -y prometheus prometheus-node-exporter
    systemctl enable prometheus prometheus-node-exporter

    # Step 13: Install MEV-Boost (no censorship relays) for potentially increased rewards
    apt-get -y install mev-boost

    # Step 14: Install and configure Nginx for reverse proxy and web access
    apt-get -y install nginx
    # UFW FIREWALL REMOVED AS REQUESTED - **SECURITY RISK!** - Consider re-enabling and configuring UFW for security
    apt-get -y install ethereumonarm-nginx-proxy-extras ethereumonarm-utils ethereumonarm-config-sync
    systemctl enable nginx

    # Step 15: Disable root user login for enhanced security
    passwd -l root

    # Step 16: Restore Ethereum clients configuration from backup if it exists
    if [ -d "/home/ethereum/.etc/ethereum/" ]; then
        rsync --min-size=1 -avz "/home/ethereum/.etc/ethereum/" "/etc/ethereum/"
    fi

    # Step 17: Add Ethereum on ARM release version file
    EOA_RELEASE_FILE="/etc/eoa-release"
    EOA_MINOR_VERSION=${EOA_MINOR_VERSION:-0}
    EOA_MAJOR_VERSION=$(date +"%y"."%m")
    EOA_VERSION="Ethereum on ARM $EOA_MAJOR_VERSION.$EOA_MINOR_VERSION"
    echo "$EOA_VERSION" >"$EOA_RELEASE_FILE"

    # Step 18: Create the first-run flag to prevent re-execution and reboot the system
    touch "$FLAG"
    grep "rc.local" /var/log/syslog >>"$FLAG" # Keeping this line for historical logging of rc.local execution, purpose is limited.
    reboot
else
    echo "Nothing to do"
    # Logging removed as requested
fi

exit 0
