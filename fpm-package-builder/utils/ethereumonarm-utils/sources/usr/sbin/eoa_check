#!/usr/bin/env bash

source /usr/lib/ethereumonarm/eoa-config/variables.sh
source /usr/lib/ethereumonarm/eoa-config/l1_node.sh

USE_COLORS=true
SHOW_SUMMARY=true
SHOW_LOGS=false

# Check if the user is root
if [ "$(id -u)" != "0" ]; then
	# If the user is not root, print an error message and exit
	echo -e "Error: ${RED}You must be Root to run this script${NC}. please run sudo eoa_check.sh"
	exit 1

fi

while getopts "nsl" opt; do
	case ${opt} in
	n)
		USE_COLORS=false
		;;
	s)
		SHOW_SUMMARY=false
		;;
	l)
		SHOW_LOGS=true
		;;
	\?)
		echo "Invalid option: -$OPTARG" >&2
		;;
	esac
done

#Colors
if [ "$USE_COLORS" = true ]; then
	RED='\033[0;91m'
	BLUE='\033[1;34m'
	GREEN='\033[0;92m'
	ORANGE='\033[0;33m'
	BOLD='\033[1m'
	NC='\033[0m'
else
	RED=''
	BLUE=''
	GREEN=''
	ORANGE=''
	BOLD=''
	NC=''
fi

# Show script summary
if [ "$show_summary" = true ]; then
	echo -e "${BOLD}This script will check various system information such as hardware, software, and service status.${NC}"
	echo -e "It will check for the following: "
	echo -e "- Board Model"
	echo -e "- RAM size"
	echo -e "- Disk Model"
	echo -e "- Ethereum clients"
	echo -e "- Execution port number"
	echo -e "- jwtsecret file"
	echo
	read -p "Do you want to continue? (y/n) " -n 1 -r
	echo
	if [[ ! $REPLY =~ ^[Yy]$ ]]; then
		exit 1
	fi
fi

section() {
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' "#"
}

separator() {
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}



# Hardware tests
# Print separator

echo
echo -e "${BOLD}HARDWARE${NC}"
section
separator
echo -e "${BOLD}BOARD_MODEL${NC}"
echo -e "You are running a ${BLUE}$BOARD_MODEL${NC} board"
separator
echo -e "${BOLD}RAM${NC}"
# Check RAM size and output result
if [ "$(echo "$TOTAL_RAM_GB < 7" | bc)" -eq 1 ]; then
	echo -e "RAM size check ${RED}FAIL${NC} Total RAM is less than 8GB"
elif [ "$(echo "$TOTAL_RAM_GB >= 7 && $TOTAL_RAM_GB < 15" | bc)" -eq 1 ]; then
	echo -e "RAM size check ${ORANGE}WARNING${NC} Total RAM is 8GB"
else
	echo -e "RAM size check ${GREEN}PASS${NC} Total RAM is 16GB or more"
fi

# Print separator
separator

echo -e "${BOLD}DISKS${NC}"
# Check if device '/dev/nvme0n1' exists
if [ -e "/dev/nvme0n1" ]; then
	NVME_DISK=true
fi

# Check if device '/dev/sda' exists
if [ -e "/dev/sda" ]; then
	USB_DISK=true
fi

# Check if there are any SSD disks present or mounted
if [ $USB_DISK ] || [ $NVME_DISK ]; then
	echo -e "Disk check ${GREEN}PASS${NC} External disk detected"
else
	echo -e "${RED}Error: There are no SSD disks present or mounted${NC}. Please review your set up or /etc/fstab config."

fi

if $NVME_DISK; then
	echo -e "Your NVMe Disk MODEL is $NVME_DISK_MODEL"
fi

if $USB_DISK; then
	echo -e "Your USB Disk MODEL is $USB_DISK_MODEL"
fi

echo "Swap file info:"
swapon -s

# Print separator
separator

echo -e "${BOLD}TEMPERATURE${NC}"

echo "Temperature: $BOARD_TEMP ÂºC"

# Print separator
separator

echo
echo -e "${BOLD}SYSTEM${NC}"
section
separator
echo -e "${BOLD}USER CONFIG${NC}"
# Check Ethereum account
if id "ethereum" >/dev/null 2>&1; then
	echo -e "Ethereum account check ${GREEN}PASS${NC} ethereum user exists"
else
	echo -e "${RED}User ethereum does not exist, installation failed${NC}. Please see /var/log for more info"
fi

echo
echo -e "${BOLD}ETHEREUM${NC}"
section
separator
echo -e "${BOLD}ETHEREUM CLIENTS${NC}"

# Print error and exit if no consensus client is running
#if [ "${consensus_is_running}" = false ]; then
#	echo -e "Error: ${RED}No Consensus Client is running${NC}. Please, start a Consensus Layer client and run eoa_check.sh again"
#
#fi

# Print error and exit if no execution client is running
#if [ "${execution_is_running}" = false ]; then
#	echo -e "${RED}No Execution Client is running${NC}. Please, start an Execution Layer client and run eoa_check.sh again"
#
#fi

# Print separator
separator
echo -e "${BOLD}JWT FILE${NC}"

# Check JWT file
if test -s "$jwtsecret_file"; then
	echo -e "JWT secret file check ${GREEN}PASS${NC} File exists and it is not empty"
else
	echo -e "${RED}The file $jwtsecret_file does not exist or it is empty${NC}"

fi

# Print separator
separator
echo -e "${BOLD}JWT PORT${NC}"

# Check $execution_port port
if NC -z localhost $execution_port; then
	echo -e "Port $execution_port check ${GREEN}PASS${NC} Port is listening and accepting connections"
else
	echo -e "${RED}Port $execution_port is not open. Execution Layer and Consensus Layer cannot communicate${NC}"

fi

# Print separator
separator
echo -e "${BOLD}FORWARDED PORTS${NC}"

if (curl -s ifconfig.co/port/30303 -w "\n" | grep -c "\"reachable\": true" >/dev/null 2>&1); then
	echo -e "Port 30303 check ${GREEN}PASS${NC} Port is open"
else
	echo -e "Port 30303 check ${RED}FAIL${NC}, please open it in your router or firewall ${NC}"
fi

if (curl -s ifconfig.co/port/9000 -w "\n" | grep -c "\"reachable\": true" >/dev/null 2>&1); then
	echo -e "Port 9000 check ${GREEN}PASS${NC} Port is open"
else
	echo -e "Port 9000 check ${RED}FAIL${NC}, please open it in your router or firewall ${NC}"
fi

# Print separator
separator
echo -e "${BOLD}INSTALLED PACKAGES${NC}"
grep -hoP '(?<=Package: ).+' /var/lib/apt/lists/apt.ethraspbian.com_dists_focal_* | xargs dpkg-query -f '${binary:Package}\n' -W 2>/dev/null
echo ""

# Print separator
echo
echo -e "${BOLD}LOGS${NC}"
section
separator
echo -e "${BOLD}PROCESSES${NC}"
top -bcn 1

# Print separator
separator
echo -e "${BOLD}LISTENING PORTS${NC}"
ss -tunlp

# Print separator
separator
echo -e "${BOLD}SYSLOG${NC}"
tail -n 50 /var/log/syslog

separator
echo -e "${BOLD}RC.LOCAL${NC}"
cat /root/first-run.flag

# Exit with success
exit 0
