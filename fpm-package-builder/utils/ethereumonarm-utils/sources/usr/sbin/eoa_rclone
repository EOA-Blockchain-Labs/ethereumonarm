#!/bin/bash

# #############################################################################
# Ethereum Data Backup Script with rclone
#
# This script compresses specified folders and uploads them to a cloud storage
# provider using rclone. It supports logging to a file or the systemd journal.
# #############################################################################

# --- Default Configuration ---
# These can be overridden with command-line flags.
DEFAULT_CONFIG_FILE="/etc/ethereum/rclone_eoa.conf"
DEFAULT_LOG_FILE="/var/log/rclone_ethereum_backup.log"
LOCK_FILE="/var/run/rclone_ethereum_backup.lock"
LOG_MODE="journal" # Default logging mode: 'journal' or 'file'

# --- Script Functions ---

# Function to display usage information
usage() {
    echo "Usage: $(basename "$0") [-c CONFIG_FILE] [-l LOG_MODE] [-h]"
    echo "Automated Ethereum data backup script."
    echo
    echo "Options:"
    echo "  -c    Path to the configuration file. Default: ${DEFAULT_CONFIG_FILE}"
    echo "  -l    Logging mode: 'journal' or 'file'."
    echo "        'journal': Logs to the systemd journal (Default)."
    echo "        'file': Logs to a file (${DEFAULT_LOG_FILE})."
    echo "  -h    Display this help message and exit."
    echo
}

# Function to log messages based on the selected LOG_MODE
log_message() {
    local message="$1"
    if [[ "$LOG_MODE" == "journal" ]]; then
        # systemd-cat automatically adds timestamps and identifiers.
        # The -t tag makes it easy to filter logs with 'journalctl -t ethereum-backup'
        echo "$message" | systemd-cat -t "ethereum-backup" -p info
    else
        # For file logging, we prepend the timestamp manually.
        local timestamp
        timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        echo "$timestamp - $message" | sudo tee -a "$LOG_FILE"
    fi
}

# Function to clean up temporary files. This is called by the trap.
cleanup() {
    log_message "Executing cleanup..."
    if [ -d "$TEMP_ARCHIVE_DIR" ]; then
        sudo rm -rf "$TEMP_ARCHIVE_DIR"
        log_message "Removed temporary directory: $TEMP_ARCHIVE_DIR"
    fi
    log_message "Cleanup complete."
}

# --- Argument Parsing with getopts ---
CONFIG_FILE="$DEFAULT_CONFIG_FILE"
LOG_FILE="$DEFAULT_LOG_FILE"

while getopts "c:l:h" opt; do
    case "${opt}" in
        c)
            CONFIG_FILE="${OPTARG}"
            ;;
        l)
            LOG_MODE="${OPTARG}"
            if [[ "$LOG_MODE" != "file" && "$LOG_MODE" != "journal" ]]; then
                echo "Error: Invalid argument for -l. Must be 'file' or 'journal'." >&2
                usage
                exit 1
            fi
            ;;
        h)
            usage
            exit 0
            ;;
        *)
            usage
            exit 1
            ;;
    esac
done

# --- Main Execution Block with Locking ---
(
    flock -n 9 || {
        # If logging to journal, use it for the lock error as well.
        if [[ "$LOG_MODE" == "journal" ]]; then
            echo "Backup script is already running. Exiting." | systemd-cat -t "ethereum-backup" -p err
        else
            echo "$(date +'%Y-%m-%d %H:%M:%S') - ERROR: Backup script is already running. Exiting." | sudo tee -a "$LOG_FILE"
        fi
        exit 1
    }

    # --- Initial Setup ---
    HOSTNAME=$(uname -n)
    BACKUP_ROOT_DIR="ethereum_backups/${HOSTNAME}"
    DATE_FORMAT=$(date +%u) # Day of the week (1=Monday, 7=Sunday)
    TEMP_ARCHIVE_DIR="/tmp/ethereum_backup_temp_$$" # Use PID for unique temp dir

    trap cleanup EXIT TERM INT

    log_message "--- Starting Backup for host '$HOSTNAME' ---"
    log_message "Using Config File: $CONFIG_FILE"
    log_message "Logging Mode: $LOG_MODE"
    if [[ "$LOG_MODE" == "file" ]]; then
        log_message "Using Log File: $LOG_FILE"
    fi

    # --- Read Configuration from File ---
    if [ ! -f "$CONFIG_FILE" ]; then
        log_message "FATAL: Configuration file not found: $CONFIG_FILE"
        exit 1
    fi

    RCLONE_REMOTE=$(grep '^CLOUD_REMOTE_NAME=' "$CONFIG_FILE" | cut -d'=' -f2 | tr -d '[:space:]')
    if [ -z "$RCLONE_REMOTE" ]; then
        log_message "FATAL: CLOUD_REMOTE_NAME not found or is empty in $CONFIG_FILE."
        exit 1
    fi
    log_message "Using rclone remote: $RCLONE_REMOTE"

    SOURCE_FOLDERS_ARRAY=()
    mapfile -t SOURCE_FOLDERS_ARRAY < <(sed -n '/^SOURCE_FOLDERS=/,/^[[:space:]]*$/{/SOURCE_FOLDERS=/d; /^[[:space:]]*$/d; /^#/d; p}' "$CONFIG_FILE")

    if [ ${#SOURCE_FOLDERS_ARRAY[@]} -eq 0 ]; then
        log_message "FATAL: No source folders specified in $CONFIG_FILE under 'SOURCE_FOLDERS='."
        exit 1
    fi
    log_message "Source folders identified: ${SOURCE_FOLDERS_ARRAY[*]}"

    # --- Backup Logic ---
    log_message "Using weekly overwrite strategy (day of week: $DATE_FORMAT)."

    sudo mkdir -p "$TEMP_ARCHIVE_DIR/staging"
    if [ ! -d "$TEMP_ARCHIVE_DIR/staging" ]; then
        log_message "FATAL: Could not create temporary staging directory."
        exit 1
    fi

    log_message "Staging data from source folders for compression."
    for FOLDER_PATH in "${SOURCE_FOLDERS_ARRAY[@]}"; do
        CLEAN_FOLDER_PATH=$(echo "$FOLDER_PATH" | sed 's:/*$::')
        if [ ! -e "$CLEAN_FOLDER_PATH" ]; then
            log_message "WARNING: Source path does not exist, skipping: $CLEAN_FOLDER_PATH"
            continue
        fi
        log_message "Staging: $CLEAN_FOLDER_PATH"
        if ! sudo rsync -aR "$CLEAN_FOLDER_PATH" "$TEMP_ARCHIVE_DIR/staging/"; then
            log_message "ERROR: Failed to stage $CLEAN_FOLDER_PATH."
            exit 1
        fi
    done

    # --- Create and Stream Archive ---
    ARCHIVE_NAME="ethereum_data_weekly_backup.tar.gz"
    DESTINATION="$RCLONE_REMOTE:$BACKUP_ROOT_DIR/$DATE_FORMAT/$ARCHIVE_NAME"
    
    # Set rclone logging options dynamically
    RCLONE_LOG_OPTS=()
    if [[ "$LOG_MODE" == "journal" ]]; then
        RCLONE_LOG_OPTS+=(--log-systemd)
    else
        RCLONE_LOG_OPTS+=(--log-file="$LOG_FILE")
    fi

    log_message "Creating and streaming archive directly to $DESTINATION"
    if sudo tar -C "$TEMP_ARCHIVE_DIR/staging" -cz . | rclone rcat "$DESTINATION" --stats-one-line "${RCLONE_LOG_OPTS[@]}"; then
        log_message "Successfully streamed backup to $RCLONE_REMOTE."
    else
        log_message "ERROR: Failed to stream backup to $RCLONE_REMOTE."
        exit 1
    fi

    log_message "--- Backup for day $DATE_FORMAT completed successfully. ---"

) 9>"$LOCK_FILE"