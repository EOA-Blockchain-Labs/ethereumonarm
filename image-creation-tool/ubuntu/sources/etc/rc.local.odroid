#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
# This script turns the Ubuntu 64 bit image into an Ethereum on ARM image
#

FLAG="/root/first-run.flag"
if [ ! -f $FLAG ]; then

  # Wait to interface to link up
  n=0
  until [ "$n" -ge 3 ]; do

    if nc -z apt.ethraspbian.com 80 >/dev/null 2>&1; then
      break
    else
      n=$((n + 1))
      sleep 5
    fi
  done

  if [ "$n" -eq 3 ]; then
    echo "Stopping the installation, access to apt.ethraspbian.com is needed"
    exit 1
  fi

  # Enable SSH server and install necessary packages
  systemctl enable ssh
  sleep 60
  apt-get update && apt-get -y install gdisk software-properties-common

  # Format NVMe disk and mount it as /home
  echo "Looking for NVMe drive"
  if stat /dev/nvme0n1 >/dev/null 2>&1; then
    echo "NVMe disk found"
    echo "Partitioning and formatting Drive..."
    wipefs -a /dev/nvme0n1
    sgdisk -n 0:0:0 /dev/nvme0n1
    mkfs.ext4 -F /dev/nvme0n1p1
    echo '/dev/nvme0n1p1 /home ext4 defaults 0 2' >>/etc/fstab && mount /home
  else
    echo "no SDD detected"
    echo "Stopping the installation, an NVMe disk is needed"
    exit 1
  fi

  # Modify hostname and /etc/hosts (ethereumonarm-$MAC-HASH-CHUNK)
  echo Changing hostname
  # Get the network interface
  ACTIVE_INTERFACE=$(ip route get 8.8.8.8 | awk '/dev/ {print $5}')
  # Get the MAC address for the active network interface
  MAC_ADDRESS=$(cat /sys/class/net/"$ACTIVE_INTERFACE"/address)
  MAC_HASH=$(echo "$MAC_ADDRESS" | sha256sum | awk '{print substr($0,0,9)}')
  echo ethereumonarm-odroidm1-"$MAC_HASH" >/etc/hostname
  sed -i "s/127.0.0.1.*/127.0.0.1\tethereumonarm-odroidm1-$MAC_HASH/g" /etc/hosts

  # Create Ethereum account
  echo "Creating ethereum user"
  if ! id -u ethereum >/dev/null 2>&1; then
    adduser --disabled-password --gecos "" ethereum
  fi

  echo "ethereum:ethereum" | chpasswd
  for GRP in sudo netdev audio video dialout plugdev; do
    adduser ethereum $GRP
  done

  # Force password change on first login
  chage -d 0 ethereum

  # Ethereum software installation
  # Add APT EthRaspbian repository
  sleep 5
  echo "Adding Ethereum repositories"
  wget -q -O - http://apt.ethereumonarm.com/eoa.apt.keyring.gpg | sudo tee /etc/apt/trusted.gpg.d/eoa.apt.keyring.gpg >/dev/null
  add-apt-repository -y -n "deb http://apt.ethereumonarm.com focal main"

  # Install Ethereum packages
  echo Installing Ethereum packages
  apt-get update
  apt-get -y install ethereumonarm-armbian-extras ethereumonarm-utils geth nethermind erigon besu prysm lighthouse nimbus teku staking-deposit-cli

  # Create an alias for package updates
  cat <<EOF >>/etc/bash.bashrc
  alias update-ethereum='
sudo apt-get update
sudo apt-get install geth nethermind erigon besu prysm lighthouse nimbus teku staking-deposit-cli'
EOF
  # Install monitoring packages
  wget -q -O - https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/grafana.gpg >/dev/null
  echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
  apt-get -y update
  apt-get -y install grafana
  systemctl enable grafana-server
  adduser --quiet --system --home /home/prometheus --no-create-home --group --gecos "Prometheus daemon" prometheus
  mkdir -p /home/prometheus/{metrics2,node-exporter}
  chown -R prometheus:prometheus /home/prometheus/{metrics2,node-exporter}
  apt-get install -y prometheus prometheus-node-exporter ethereum-metrics-exporter json-exporter
  systemctl enable prometheus prometheus-node-exporter ethereum-metrics-exporter json-exporter

  # install Ethereum on ARM monitoring config
  apt-get -y install ethereumonarm-monitoring-extras
  set-ethereunonarm-monitoring-extras -o

  # Install Nginx proxy for connecting wallets or quering the RPC API
  apt-get -y install nginx
  apt-get -y install ethereumonarm-nginx-proxy-extras
  systemctl enable nginx

  # Install MEV Boost with no censorship relays
  apt-get -y install mev-boost

  #Install ufw
  apt-get -y install ufw
  ufw --force disable

  #Disable root user
  passwd -l root

  #Delete odroid user
  deluser odroid

  #the next line creates an empty file so it won't run on next boot
  touch $FLAG
  grep "rc.local" /var/log/syslog >>$FLAG
  reboot
else
  echo "Nothing to do"
fi
exit 0
