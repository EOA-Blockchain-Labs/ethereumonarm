#!/bin/bash
# Ethereum on ARM Node Initial Setup Script
# rc.local
#
# This script is executed at the end of the system startup process, specifically when it reaches the multiuser runlevel.
# It is crucial that the script concludes with an "exit 0" status upon successful completion, or any other non-zero value to indicate an error.
#
# The script can be enabled or disabled by simply modifying its execution permissions.
#
# By default, this script performs no actions.
# This script is designed to convert an armbian Ubuntu 64-bit operating system image into one that is ready to function as an Ethereum node on an ARM-based device, as part of the Ethereum on ARM project.
#
# This script is intended to be run only once, during the first system startup.
# It automates the setup of an Ethereum node on an ARM device.
# A flag file is utilized to prevent the script from being executed again after the initial setup has been completed.
#
# This rc.local script is part of the Ethereum on ARM project (see online documentation for more details: https://ethereum-on-arm-documentation.readthedocs.io/en/latest/index.html) and its purpose is to transform various ARM-based devices into fully functional Ethereum nodes.

FLAG="/root/first-run.flag"

# Check if the setup has already been completed.
# If the flag file exists, it means the script has run before, so we exit.
if [ -f "$FLAG" ]; then
    echo "Setup already completed. Exiting."
    exit 0
fi

# Define the wait time for the network interface to link up (in seconds).
WAIT_TIME=15

# Wait for the interface to link up.
sleep "$WAIT_TIME"

# Check for internet connection (Borrowed from Armbian).
wget -q -t 1 --timeout=30 --spider http://github.com
if [[ $? -ne 0 ]]; then
    echo "Stopping the installation, internet access is necessary"
    exit 1
fi

# --- Device Detection and Setting Up Variables ---
# We try to find the device model from a specific system file.
# If that fails, we use the 'uname' command to get the machine type.
# We then remove any null characters from the output.
DEVICE_MODEL=$(cat /sys/firmware/devicetree/base/model 2>/dev/null || uname -m | tr -d '\0')

# We configure specific settings based on the detected device model.

case "$DEVICE_MODEL" in

"Raspberry Pi 5 Model B Rev 1.1")
    TARGET_DISK="/dev/nvme0n1" # Specifies the disk device where the Ethereum data will be stored.
    PARTITION1="p1"            # Defines the partition number on the target disk to be used.
    HOSTNAME_SEED="rpi5"       # Used as a base to generate a unique hostname for this device.
    SWAP_SIZE=8192             # Sets the size of the swap space in megabytes (MB).
    SWAPPINESS=1              # Controls how aggressively the kernel uses swap memory (lower value means less aggressive).
    ;;

"FriendlyElec NanoPC-T6")
    TARGET_DISK="/dev/nvme0n1" # Specifies the disk device where the Ethereum data will be stored.
    PARTITION1="p1"            # Defines the partition number on the target disk to be used.
    HOSTNAME_SEED="nanopct6"   # Used as a base to generate a unique hostname for this device.
    SWAP_SIZE=8192             # Sets the size of the swap space in megabytes (MB).
    SWAPPINESS=1             # Controls how aggressively the kernel uses swap memory (lower value means less aggressive).
    ;;

"Radxa ROCK 5B")
    TARGET_DISK="/dev/nvme0n1" # Specifies the disk device where the Ethereum data will be stored.
    PARTITION1="p1"            # Defines the partition number on the target disk to be used.
    HOSTNAME_SEED="rock5b"     # Used as a base to generate a unique hostname for this device.
    SWAP_SIZE=8192             # Sets the size of the swap space in megabytes (MB).
    SWAPPINESS=1              # Controls how aggressively the kernel uses swap memory (lower value means less aggressive).
    ;;

"Orange Pi 5 Plus" | "Xunlong Orange Pi 5 Plus")
    TARGET_DISK="/dev/nvme0n1" # Specifies the disk device where the Ethereum data will be stored. .
    PARTITION1="p1"            # Defines the partition number on the target disk to be used.
    HOSTNAME_SEED="opi5plus"   # Used as a base to generate a unique hostname for this device.
    SWAP_SIZE=8192             # Sets the size of the swap space in megabytes (MB).
    SWAPPINESS=1              # Controls how aggressively the kernel uses swap memory (lower value means less aggressive).
    ;;

*)
    echo "Unrecognized device model: $DEVICE_MODEL. Exiting." # If the detected device model does not match any of the cases above, this message is displayed, and the script will terminate.
    exit 1
    ;;

esac

# --- List of Packages to Install ---
# These are the basic tools and libraries we need.
BASE_PACKAGES="gdisk software-properties-common apt-utils vim net-tools file kitty-terminfo bash-completion ufw wget gpg"
# These are the different Ethereum client software options and related tools.
ETHEREUM_PACKAGES="geth nethermind erigon reth besu prysm lighthouse nimbus teku lodestar staking-deposit-cli mev-boost arbitrum-nitro optimism-op-geth optimism-op-node polygon-bor polygon-heimdall starknet-juno fuel-network ethereumonarm-utils"
# These are the tools for monitoring the Ethereum node.
MONITORING_PACKAGES="grafana prometheus prometheus-node-exporter ethereumonarm-monitoring-extras" # Includes extra monitoring configurations.
# These are the packages needed for setting up Nginx as a reverse proxy.
NGINX_PACKAGES="nginx ethereumonarm-nginx-proxy-extras ethereumonarm-config-sync ethereumonarm-utils"

# --- Update System and Install Basic Packages ---
# First, we update the list of available packages.
apt-get update
# Then, we install the basic packages without asking for confirmation.
apt-get -y install $BASE_PACKAGES

# --- Disk Partitioning and Formatting ---
# This function will format the specified disk partition.
format_disk() {
    local DISK="$1"
    local PARTITION="${DISK}${PARTITION1}"

    # Create a temporary directory to check if the partition is already formatted.
    TMP_DIR=$(mktemp -d)
    local FORMAT=true

    # Check if the partition exists and if it seems to be a Linux filesystem.
    if [[ -b "$PARTITION" ]] && command -v file >/dev/null && [[ $(file -s "$PARTITION" | grep 'Linux.*filesystem') ]]; then
        # Try to mount the partition temporarily.
        mount "$PARTITION" "$TMP_DIR" 2>/dev/null
        # If an 'ethereum' directory exists and a '.format_me' file does not, we assume it's already set up.
        [[ -d "$TMP_DIR/ethereum" && ! -f "$TMP_DIR/ethereum/.format_me" ]] && FORMAT=false
        # If mounted, unmount it.
        mountpoint -q "$TMP_DIR" && umount "$TMP_DIR"
    fi
    # Remove the temporary directory.
    rm -rf "$TMP_DIR"

    # If the 'FORMAT' variable is still true, we proceed with formatting.
    if [ "$FORMAT" = true ]; then
        # Remove any existing filesystem signatures from the disk.
        wipefs -a "$DISK"
        # Create a new partition on the disk.
        sgdisk -n 0:0:0 "$DISK"
        # Format the partition with the ext4 filesystem, forcing the operation.
        mkfs.ext4 -F "$PARTITION" || return 1
    fi
}

# Call the format_disk function for the target disk. If it fails, exit the script.
format_disk "$TARGET_DISK" || exit 1
# Set the reserved block count for the filesystem to 0%.
tune2fs -m 0 "${TARGET_DISK}${PARTITION1}"

# Add an entry to the fstab file to automatically mount the partition at /home on boot.
echo "${TARGET_DISK}${PARTITION1} /home ext4 defaults,noatime 0 2" >>/etc/fstab
# Mount the /home directory.
mount /home
# Reload the systemd manager configuration.
systemctl daemon-reload

# --- Ethereum User Setup ---
# Check if the 'ethereum' user already exists. If not, create it.
id -u ethereum &>/dev/null || {
    adduser --disabled-password --gecos "" ethereum
    # Set the password for the 'ethereum' user to 'ethereum'.
    echo "ethereum:ethereum" | chpasswd
    # Force the user to change their password on the next login.
    chage -d 0 ethereum
}

# Add the 'ethereum' user to various groups for necessary permissions.
for GRP in sudo netdev audio video dialout plugdev; do
    adduser ethereum "$GRP"
done

# --- Swap Configuration ---
# Set the swap file location
SWAP_FILE="/home/ethereum/swapfile"
# Set the systemd swap unit name
SWAP_UNIT="ethereumonarm-swap.swap"

# Create the swap file
fallocate -l "${SWAP_SIZE}M" "${SWAP_FILE}"

# Set permissions and format the swap file
chmod 600 "${SWAP_FILE}"
mkswap "${SWAP_FILE}"

# Create the systemd swap unit file
cat <<EOF >/etc/systemd/system/"${SWAP_UNIT}"
[Unit]
Description=Swap File at $SWAP_FILE
After=network.target

[Swap]
What=$SWAP_FILE
Priority=10

[Install]
WantedBy=local-fs.target
EOF

# Enable and start the swap unit
systemctl enable --now "${SWAP_UNIT}"

# Reload systemd daemon to ensure changes are applied
systemctl daemon-reload

# --- Hostname and Network Setup ---
# Get the name of the active network interface.
ACTIVE_INTERFACE=$(ip route get 8.8.8.8 | awk '/dev/ {print $5}')
# Get the MAC address of the active network interface.
MAC_ADDRESS=$(cat /sys/class/net/"$ACTIVE_INTERFACE"/address)
# Create a short hash from the MAC address for uniqueness.
MAC_HASH=$(echo "$MAC_ADDRESS" | sha256sum | cut -c1-8)
# Generate a new hostname for the system.
NEW_HOSTNAME="ethereumonarm-${HOSTNAME_SEED}-${MAC_HASH}"
# Set the new hostname.
echo "$NEW_HOSTNAME" >/etc/hostname
# Update the /etc/hosts file with the new hostname.
sed -i "s/127\.0\.1\.1.*/127.0.1.1 $NEW_HOSTNAME/g" /etc/hosts

# --- System Performance Tuning ---
# If the armbian-zram-config file exists, disable zram.
[[ -f /etc/default/armbian-zram-config ]] && sed -i "s/ENABLED=true/ENABLED=false/g" /etc/default/armbian-zram-config
# Set the kernel swappiness value.
echo "vm.swappiness=${SWAPPINESS}" >>/etc/sysctl.conf
# Apply the new sysctl settings.
sysctl -p

# --- Ethereum Software Installation ---
# Download and install the Ethereum on ARM repository key.
wget -qO- http://apt.ethereumonarm.com/eoa.apt.keyring.gpg | tee /etc/apt/trusted.gpg.d/eoa.gpg >/dev/null
# Add the Ethereum on ARM repository to the system's software sources.
add-apt-repository -y -n "deb http://apt.ethereumonarm.com noble main"
# Update the package lists again to include the new repository.
apt-get update
# Install all the specified Ethereum-related packages.
apt-get -y install $ETHEREUM_PACKAGES

# Add EOA Release version
# Define the file where the release version will be stored.
EOA_RELEASE_FILE="/etc/eoa-release"
# Set a default minor version if it's not already defined.
EOA_MINOR_VERSION=${EOA_MINOR_VERSION:-0}
# Get the current year and month to form the major version.
EOA_MAJOR_VERSION=$(date +"%y"."%m")
# Create the full release version string.
EOA_VERSION="Ethereum on ARM $EOA_MAJOR_VERSION.$EOA_MINOR_VERSION"
# Write the release version to the specified file.
echo "$EOA_VERSION" >"$EOA_RELEASE_FILE"

# --- Alias for Ethereum Package Updates ---
# Add an alias to the bash configuration file for easy Ethereum package updates.
cat <<EOF >>/etc/bash.bashrc
alias update-ethereum='
sudo apt-get update
sudo apt-get install geth nethermind erigon reth besu prysm lighthouse nimbus teku lodestar staking-deposit-cli'
EOF

# --- Monitoring and Observability Stack ---
# Install necessary tools for adding repositories.
apt-get -y install gpg wget
# Download and add the Grafana repository key.
wget -q -O - https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/grafana.gpg >/dev/null
# Add the Grafana repository to the system's software sources.
echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
# Update the package lists to include the Grafana repository.
apt-get -y update
# Install the Grafana server.
apt-get -y install grafana
# Enable the Grafana server service to start on boot.
systemctl enable grafana-server
# Create a system user for Prometheus.
adduser --quiet --system --home /home/prometheus --no-create-home --group --gecos "Prometheus daemon" prometheus
# Create directories for Prometheus data.
mkdir -p /home/prometheus/{metrics2,node-exporter}
# Set the correct ownership for the Prometheus data directories.
chown -R prometheus:prometheus /home/prometheus/{metrics2,node-exporter}
# Install Prometheus and the Node Exporter.
apt-get -y install prometheus prometheus-node-exporter
# Enable the Prometheus and Node Exporter services to start on boot.
systemctl enable prometheus prometheus-node-exporter

# Install Ethereum on ARM monitoring configuration.
apt-get -y install ethereumonarm-monitoring-extras
# Apply the Ethereum on ARM monitoring extras configuration.
set-ethereumonarm-monitoring-extras -o
systemctl daemon-reload

# --- Nginx Setup ---
# Install the Nginx web server and related packages.
apt-get -y install $NGINX_PACKAGES
# Enable the Nginx service to start on boot.
systemctl enable nginx

# --- Security Hardening ---
# Disable the root user account to prevent direct login.
passwd -l root

# --- Cleanup: Delete other Users ---
# Get the minimum and maximum user IDs for regular users.
UID_MIN=$(awk '/^UID_MIN/{print $2}' /etc/login.defs)
UID_MAX=$(awk '/^UID_MAX/ {print $2}' /etc/login.defs)

# Find and delete all users whose UID falls within the regular user range and are not the 'ethereum' user.
awk -F: -v min="$UID_MIN" -v max="$UID_MAX" '{if($3 >= min && $3 <= max && $1 != "ethereum") print $1}' /etc/passwd | xargs -r sudo deluser --remove-home

# --- Correct ethereum home permissions ---
# Ensure the 'ethereum' user owns their home directory.
chown -R ethereum:ethereum /home/ethereum/

# --- Disable ufw ---
ufw --force disable

# --- First Run Flag and Reboot ---
# Create the flag file to indicate that the script has been run.
touch "$FLAG"
# This line seems to be for historical logging of rc.local execution, its purpose is limited.
grep "rc.local" /var/log/syslog >>"$FLAG"
# Reboot the system to apply all changes.
reboot

exit 0
