#!/usr/bin/env bash

#Colors
red='\033[0;91m'
green='\033[0;92m'
orange='\033[0;33m'
nc='\033[0m'

#Disks
nvme_disk=false
usb_disk=false
jwtsecret_file=/etc/ethereum/jwtsecret

#Service lists
consensus_layer="prysm-beacon teku lighthouse-beacon nimbus"
execution_layer="geth erigon besu nethermind"

#Execution port
execution_port=8551

#Service status
consensus_is_running=false
execution_is_running=false

# Get the total RAM size in bytes
total_ram=$(awk '/MemTotal/ {print $2}' /proc/meminfo)

# Convert bytes to gigabytes
total_ram_gb=$(awk "BEGIN {print $total_ram/1024/1024}")

separator() {
	printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

# Check if the user is root
if [ "$(id -u)" != "0" ]; then
	# If the user is not root, print an error message and exit
	echo -e "Error: ${red}You must be Root to run this script${nc}. please run sudo eoa_check.sh"
	exit 1
fi

# Print separator
separator

# Check Ethereum user
if id "ethereum" >/dev/null 2>&1; then
	echo -e "Ethereum user check ${green}✓${nc} ethereum user exists"
else
	echo -e "${red}User ethereum does not exist, installation failed${nc}. Please see /var/log for more info"
	exit 1
fi

# Print separator
separator

# Check consensus layer
for c in ${consensus_layer}; do
	if (systemctl is-active "$c" >/dev/null 2>&1); then
		echo -e "Consensus Layer check ${green}✓${nc} $c service is running"
		consensus_is_running=true
		continue
	fi
done

# Check execution layer
for e in ${execution_layer}; do
	if (systemctl is-active "$e" >/dev/null 2>&1); then
		echo -e "Execution Layer check ${green}✓${nc} $e service is running"
		execution_is_running=true
		continue
	fi
done

# Print error if no consensus client is running
if [ "${consensus_is_running}" = false ]; then
	echo -e "Error: ${red}No Consensus Client is running${nc}. Please, start a Consensus Layer client"
	exit 1
fi

# Print error if no execution client is running
if [ "${execution_is_running}" = false ]; then
	echo -e "${red}No Execution Client is running${nc}. Please, start an Execution Layer client"
	exit 1
fi

# Print separator
separator

# Check JWT file
if test -s "$jwtsecret_file"; then
	echo -e "JWT secret file check ${green}✓${nc} File exists and it is not empty"
else
	echo -e "${red}The file $jwtsecret_file does not exist or it is empty${nc}"
	exit 1
fi

# Print separator
separator

# Check $execution_port port
if nc -z localhost $execution_port; then
	echo -e "Port $execution_port check ${green}✓${nc} Port is listening and accepting connections"
else
	echo -e "${red}Port $execution_port is not open. Execution Layer and Consensus Layer cannot communicate between${nc}"
	exit 1
fi

# Print separator
separator

if (curl -s ifconfig.co/port/30303 -w "\n" | grep -c "\"reachable\": true" >/dev/null 2>&1); then
	echo -e "Port 30303 check ${green}✓${nc} Port is open"
else
	echo -e "${red}Port 30303 is not open, open it in your router or firewall ${nc}"
fi

if (curl -s ifconfig.co/port/9000 -w "\n" | grep -c "\"reachable\": true" >/dev/null 2>&1); then
	echo -e "Port 9000 check ${green}✓${nc} Port is open"
else
	echo -e "${red}Port 9000 is not open, open it in your router or firewall ${nc}"
fi

# Check if device '/dev/nvme0n1' exists
if [ -e "/dev/nvme0n1" ]; then
	disks=$((disks + 1))
	nvme_disk=true
fi

# Print separator
separator

# Check if there are any SSD disks present or mounted
if [ $usb_disk ] || [ $nvme_disk ]; then
	echo -e "Disk check ${green}✓${nc} External disk detected"
else
	echo -e "${red}Error: There are no SSD disks present or mounted${nc}. Please review your set up or /etc/fstab config."
	exit 1
fi

# Print separator
separator

# Check RAM size and output result
if [ "$(echo "$total_ram_gb < 8" | bc)" -eq 1 ]; then
	echo -e "RAM size check ${red}FAIL${nc} Total RAM is less than 8GB"
elif [ "$(echo "$total_ram_gb >= 7 && $total_ram_gb < 15" | bc)" -eq 1 ]; then
	echo -e "RAM size check ${orange}WARNING${nc} Total RAM is between 8GB and 16GB"
else
	echo -e "RAM size check ${green}PASS${nc} Total RAM is over 16GB"
fi

# Print separator
separator

echo "Installed packages:"
grep -hoP '(?<=Package: ).+' /var/lib/apt/lists/apt.ethraspbian.com_dists_focal_* | tr '\n' ' '
echo ""

# Print separator
separator

echo "Voltage:"
awk '{printf ("%0.2f\n",$1/172.41); }' </sys/devices/iio_sysfs_trigger/subsystem/devices/iio:device0/in_voltage6_raw

# Print separator
separator

echo "Temperature:"
awk '{printf ("%0.2f\n",$1/1000); }' </sys/class/thermal/thermal_zone0/temp

# Print separator
separator

echo "Swap file info:"
swapon -s

# Print separator
separator

echo "Top processes:"
top -bcn 1

# Print separator
separator

echo "Listening ports:"
ss -tunlp

# Print separator
separator

echo "Last 100 lines of syslog:"
tail -n 100 /var/log/syslog

# Exit with success
exit 0