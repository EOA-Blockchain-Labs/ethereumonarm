#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
# This script turns the Ubuntu 64 bit image into an Ethereum on ARM image
#
# Function to format and a disk as /home/ethereum
format_disk() {
  local DISK="$1"
  # Different partition naming convention for NVMe drives
  if [[ "$DISK" == "/dev/nvme0n1" ]]; then
    local PARTITION="${DISK}p1"
  else
    local PARTITION="${DISK}1"
  fi

  # Mount the disk to a temporary directory using mktemp
  TMP_DIR=$(mktemp -d)
  mount "$PARTITION" "$TMP_DIR" || {
    echo "Unable to mount $PARTITION in $TMP_DIR"
    return 1
  }

  # Check if the path /home/ethereum exists on the mounted disk
  if [ -d "$TMP_DIR/ethereum" ]; then
    echo "/home/ethereum already exists on the disk."

    # Check if the .format_me file exists in the /home/ethereum path
    if [ -f "$TMP_DIR/ethereum/.format_me" ]; then
      echo "The .format_me file was found in /home/ethereum. Formatting and mounting..."
      PROCEED_WITH_FORMAT=true
    else
      echo "The .format_me file was not found in /home/ethereum. Skipping format and mount."
      PROCEED_WITH_FORMAT=false
    fi
  else
    echo "The path /home/ethereum does not exist on the disk. Formatting and mounting..."
    PROCEED_WITH_FORMAT=true
  fi

  # Unmount the disk from the temporary directory
  umount "$TMP_DIR"
  rm -r "$TMP_DIR"

  if [ "$PROCEED_WITH_FORMAT" = true ]; then
    # Create a new partition and format it as ext4
    echo "Creating new partition and formatting disk: $DISK..."
    wipefs -a "$DISK"
    sgdisk -n 0:0:0 "$DISK"
    mkfs.ext4 -F "$PARTITION" || {
      echo "Unable to format $PARTITION"
      return 1
    }
  fi
}

FLAG="/root/first-run.flag"
if [ ! -f $FLAG ]; then
  # Wait for the interface to link up
  sleep 15
  apt-get update && apt-get -y install netcat
  n=0
  until [ "$n" -ge 3 ]; do

    if nc -z apt.ethraspbian.com 80 >/dev/null 2>&1; then
      break
    else
      n=$((n + 1))
      sleep 5
    fi
  done

  if [ "$n" -eq 3 ]; then
    echo "Stopping the installation, access to apt.ethraspbian.com is needed"
    exit 1
  fi

  # Install some necessary deps
  apt-get -y install gdisk software-properties-common apt-utils

  # Check for NVMe drive
  echo "Looking for NVMe drive"
  if stat /dev/nvme0n1 >/dev/null 2>&1; then
    echo "NVMe disk found"

    # Partition and format NVMe drive
    format_disk /dev/nvme0n1

    # Mount NVMe drive as /home
    echo "Mounting NVMe disk as /home"
    echo '/dev/nvme0n1p1 /home ext4 defaults 0 2' >>/etc/fstab && mount /home
  fi

  # Modify hostname and /etc/hosts (ethereumonarm-$MAC-HASH-CHUNK)
  echo Changing hostname
  # Get the network interface
  ACTIVE_INTERFACE=$(ip route get 8.8.8.8 | awk '/dev/ {print $5}')
  # Get the MAC address for the active network interface
  MAC_ADDRESS=$(cat /sys/class/net/$ACTIVE_INTERFACE/address)
  MAC_HASH=$(echo $MAC_ADDRESS | sha256sum | awk '{print substr($0,0,9)}')
  echo ethereumonarm-orangepi5-$MAC_HASH >/etc/hostname
  sed -i "s/orangepi5/ethereumonarm-orangepi5-$MAC_HASH/g" /etc/hosts

  # Create Ethereum account
  echo "Creating ethereum user"
  if ! id -u ethereum >/dev/null 2>&1; then
    adduser --disabled-password --gecos "" ethereum
  fi

  echo "ethereum:ethereum" | chpasswd
  for GRP in sudo netdev audio video dialout plugdev; do
    adduser ethereum $GRP
  done

  # Force password change on first login
  chage -d 0 ethereum

  # Swap installation
  # Install dphys-swapfile package
  apt-get -y install dphys-swapfile

  # Configure swap file location and size
  sed -i 's|#CONF_SWAPFILE=.*|CONF_SWAPFILE=/home/ethereum/swapfile|' /etc/dphys-swapfile
  sed -i 's|#CONF_SWAPSIZE=.*|CONF_SWAPSIZE=8192|' /etc/dphys-swapfile
  sed -i 's|#CONF_MAXSWAP=.*|CONF_MAXSWAP=8192|' /etc/dphys-swapfile

  # Enable dphys-swapfile service
  systemctl enable dphys-swapfile
  # Disable ZRAM
  sed -i "s/ENABLED=true/ENABLED=false/g" /etc/default/armbian-zram-config

  # Optimize swappiness for Ethereum node
  echo "Optimizing swappiness for Ethereum node..."
  echo "vm.swappiness=10" >>/etc/sysctl.conf
  sysctl -p

  # Ethereum software installation
  # Add APT EthRaspbian repository
  sleep 5
  echo "Adding Ethereum repositories"
  wget -q -O - http://apt.ethereumonarm.com/eoa.apt.keyring.gpg | sudo tee /etc/apt/trusted.gpg.d/eoa.apt.keyring.gpg >/dev/null
  add-apt-repository -y -n "deb http://apt.ethereumonarm.com jammy main"

  # Install Ethereum packages
  echo Installing Ethereum packages
  apt-get update
  # Install Layer 1
  apt-get -y install geth nethermind erigon reth besu prysm lighthouse nimbus teku staking-deposit-cli
  # install Layer 2
  apt-get -y install arbitrum-nitro optimism-op-geth optimism-op-node polygon-bor polygon-heimdall starknet-juno

  # Create an alias for package updates
  cat <<EOF >>/etc/bash.bashrc
  alias update-ethereum='
sudo apt-get update
sudo apt-get install geth nethermind erigon besu prysm lighthouse nimbus teku staking-deposit-cli'
EOF

  # Install monitoring packages
  apt-get -y install gpg wget
  wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
  echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
  apt-get -y update
  apt-get -y install grafana
  systemctl enable grafana-server
  adduser --quiet --system --home /home/prometheus --no-create-home --group --gecos "Prometheus daemon" prometheus
  mkdir -p /home/prometheus/{metrics2,node-exporter}
  chown -R prometheus:prometheus /home/prometheus/{metrics2,node-exporter}
  apt-get install -y prometheus prometheus-node-exporter ethereum-metrics-exporter json-exporter
  systemctl enable prometheus prometheus-node-exporter ethereum-metrics-exporter json-exporter

  # install Ethereum on ARM monitoring config
  apt-get -y install ethereumonarm-monitoring-extras
  set-ethereunonarm-monitoring-extras -o

  # Install MEV Boost with no censorship relays
  apt-get -y install mev-boost

  #Install ufw
  apt-get -y install ufw
  ufw --force disable

  # Install Nginx proxy for connecting wallets or quering the RPC API
  apt-get -y install nginx
  apt-get -y install ethereumonarm-nginx-proxy-extras ethereumonarm-utils
  systemctl enable nginx

  #Disable root user
  passwd -l root

  if [ -d "/home/ethereum/.etc/ethereum/" ]; then
    rsync -avz "/home/ethereum/.etc/ethereum/" "/eth/ethereum/"
  fi

  #the next line creates an empty file so it won't run on next boot
  touch $FLAG
  grep "rc.local" /var/log/syslog >>$FLAG
  reboot
else
  echo "Nothing to do"
fi
exit 0
