#!/bin/bash
#
# /etc/rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.
# This script turns the Ubuntu 64 bit image into an Ethereum on ARM image
#

# Function to format a disk as /home/ethereum
format_disk() {
  DISK="$1"
  # Different partition naming convention for drives
  PARTITION="${DISK}${PARTITION1}"

  # Create a temporary directory for mounting
  local TMP_DIR
  TMP_DIR=$(mktemp -d)
  local PROCEED_WITH_FORMAT=false

  # If the partition exists and is some kind of Linux filesystem, try mounting it
  if [[ -b "$PARTITION" && $(file -s "$PARTITION" | grep -oP 'Linux.*filesystem') ]]; then
    mount "$PARTITION" "$TMP_DIR" 2>/dev/null
  fi

  # Check if /home/ethereum exists on the mounted disk
  if [ -d "$TMP_DIR/ethereum" ]; then
    echo "/home/ethereum already exists on the disk."

    # Check for .format_me file
    if [ -f "$TMP_DIR/ethereum/.format_me" ]; then
      echo "The .format_me file was found in /home/ethereum. Formatting and mounting..."
      PROCEED_WITH_FORMAT=true
    else
      echo "The .format_me file was not found in /home/ethereum. Skipping format and mount."
      PROCEED_WITH_FORMAT=false
    fi
  else
    echo "The path /home/ethereum does not exist on the disk. Formatting and mounting..."
    PROCEED_WITH_FORMAT=true
  fi

  # Unmount if we mounted it
  if mountpoint -q "$TMP_DIR"; then
    umount "$TMP_DIR"
  fi
  rm -rf "$TMP_DIR"

  # Proceed with format if appropriate
  if [ "$PROCEED_WITH_FORMAT" = true ]; then
    echo "Creating new partition and formatting disk: $DISK..."
    wipefs -a "$DISK"
    sgdisk -n 0:0:0 "$DISK"
    mkfs.ext4 -F "$PARTITION" || {
      echo "Unable to format $PARTITION"
      return 1
    }
  fi
}

FLAG="/root/first-run.flag"
if [ ! -f "$FLAG" ]; then

  # Step 1: Install some necessary dependencies
  apt-get update
  apt-get -y install gdisk software-properties-common apt-utils vim net-tools telnet

  # Step 2: Detect whether /dev/sda or /dev/nvme0n1 is present
  echo "Detecting target disk..."
  if stat /dev/sda >/dev/null 2>&1; then
    TARGET_DISK="/dev/sda"
    PARTITION1="1"
  elif stat /dev/nvme0n1 >/dev/null 2>&1; then
    TARGET_DISK="/dev/nvme0n1"
    PARTITION1="p1"
  else
    echo "No suitable disk found (/dev/sda or /dev/nvme0n1). You need a disk to run an Ethereum node. Stopping the installation."
    exit 1
  fi

  echo "Using target disk: $TARGET_DISK"

  # Step 3: Partition and format the detected disk
  format_disk "$TARGET_DISK"

  # Step 4: Remove FS reserved blocks
  tune2fs -m 0 "${PARTITION}"

  # Step 5: Mount the disk as /home
  echo "Mounting $TARGET_DISK as /home"
  echo "${PARTITION} /home ext4 defaults,noatime 0 2" >>/etc/fstab && mount /home

  # Step 6: Create ethereum user
  echo "Creating ethereum user"
  if ! id -u ethereum >/dev/null 2>&1; then
    adduser --disabled-password --gecos "" ethereum
    echo "ethereum:ethereum" | chpasswd
  fi
  for GRP in sudo netdev audio video dialout plugdev; do
    adduser ethereum "$GRP"
  done
  # Force password change on first login
  chage -d 0 ethereum

  # Step 7: Swap installation and configuration
  apt-get -y install dphys-swapfile
  # Configure dphys-swapfile
  sed -i 's|#CONF_SWAPFILE=.*|CONF_SWAPFILE=/home/ethereum/swapfile|' /etc/dphys-swapfile
  sed -i 's|#CONF_SWAPSIZE=.*|CONF_SWAPSIZE=8192|' /etc/dphys-swapfile
  sed -i 's|#CONF_MAXSWAP=.*|CONF_MAXSWAP=8192|' /etc/dphys-swapfile
  systemctl enable dphys-swapfile

  # Modify hostname and /etc/hosts (ethereumonarm-$MAC-HASH-CHUNK)
  echo Changing hostname
  # Get the network interface
  ACTIVE_INTERFACE=$(ip route get 8.8.8.8 | awk '/dev/ {print $5}')
  # Get the MAC address for the active network interface
  MAC_ADDRESS=$(cat /sys/class/net/"$ACTIVE_INTERFACE"/address)
  MAC_HASH=$(echo "$MAC_ADDRESS" | sha256sum | awk '{print substr($0,0,9)}')
  echo ethereumonarm-rpi5-"$MAC_HASH" >/etc/hostname
  sed -i "s/rpi5b/ethereumonarm-rpi5-$MAC_HASH/g" /etc/hosts

  # Disable ZRAM if present
  if [ -f /etc/default/armbian-zram-config ]; then
    sed -i "s/ENABLED=true/ENABLED=false/g" /etc/default/armbian-zram-config
  fi

  # Tune swappiness
  echo "Optimizing swappiness for Ethereum node..."
  echo "vm.swappiness=10" >>/etc/sysctl.conf
  sysctl -p

  # Step 8: Ethereum software installation
  echo "Adding Ethereum on ARM repository..."
  wget -q -O - http://apt.ethereumonarm.com/eoa.apt.keyring.gpg | sudo tee /etc/apt/trusted.gpg.d/eoa.apt.keyring.gpg >/dev/null
  add-apt-repository -y -n "deb http://apt.ethereumonarm.com jammy main"

  echo "Installing Ethereum packages..."
  apt-get update
  apt-get -y install geth nethermind erigon reth besu prysm lighthouse nimbus teku lodestar staking-deposit-cli
  apt-get -y install arbitrum-nitro optimism-op-geth optimism-op-node polygon-bor polygon-heimdall starknet-juno fuel-network

  # Create an alias for package updates
  cat <<EOF >>/etc/bash.bashrc
alias update-ethereum='
sudo apt-get update
sudo apt-get install geth nethermind erigon reth besu prysm lighthouse nimbus teku staking-deposit-cli'
EOF

  # Step 9: Install monitoring stack (Prometheus & Grafana)
  apt-get -y install gpg wget
  wget -q -O - https://packages.grafana.com/gpg.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/grafana.gpg >/dev/null
  echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
  apt-get -y update
  apt-get -y install grafana
  systemctl enable grafana-server

  adduser --quiet --system --home /home/prometheus --no-create-home --group --gecos "Prometheus daemon" prometheus
  mkdir -p /home/prometheus/{metrics2,node-exporter}
  chown -R prometheus:prometheus /home/prometheus/{metrics2,node-exporter}
  apt-get install -y prometheus prometheus-node-exporter
  systemctl enable prometheus prometheus-node-exporter

  # install Ethereum on ARM monitoring config
  apt-get -y install ethereumonarm-monitoring-extras
  set-ethereumonarm-monitoring-extras -o

  # Step 10: Install MEV-Boost (no censorship relays)
  apt-get -y install mev-boost

  # Step 11: Install & configure Nginx
  apt-get -y install ufw
  ufw --force disable
  apt-get -y install nginx
  apt-get -y install ethereumonarm-nginx-proxy-extras ethereumonarm-utils ethereumonarm-config-sync
  systemctl enable nginx

  # Step 12: Disable root user
  passwd -l root

  # Step 13: Restore clients configuration if a previous one exists
  if [ -d "/home/ethereum/.etc/ethereum/" ]; then
    rsync --min-size=1 -avz "/home/ethereum/.etc/ethereum/" "/etc/ethereum/"
  fi

  # Step 14: Add EOA release version
  EOA_RELEASE_FILE="/etc/eoa-release"
  EOA_MINOR_VERSION=${EOA_MINOR_VERSION:-0}
  EOA_MAJOR_VERSION=$(date +"%y"."%m")
  EOA_VERSION="Ethereum on ARM $EOA_MAJOR_VERSION.$EOA_MINOR_VERSION"
  echo "$EOA_VERSION" >"$EOA_RELEASE_FILE"

  # Create the first-run flag and reboot
  touch "$FLAG"
  grep "rc.local" /var/log/syslog >>$FLAG
  echo "Provisioning complete. Rebooting..."
  reboot
else
  echo "Nothing to do"
fi

exit 0
